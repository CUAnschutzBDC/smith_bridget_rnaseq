# This runs star on the files from the samples document can be single or paired end

# Function to return paths of input files
def _get_input(wildcards):
    if wildcards.trim_method == "no":
        # Grab path of the fastq file
        fastq1 = SAMPLE_LIST.loc[wildcards.sample, "fastq1"]
        data_dir = SAMPLE_LIST.loc[wildcards.sample, "data_dir"]
        fastq1 = os.path.join(data_dir, fastq1)
        # Make sure file exists
        fastq1  = _check_path(fastq1)
        if IS_PAIRED:
            # Grab path of second read
            fastq2 = SAMPLE_LIST.loc[wildcards.sample, "fastq2"]
            fastq2 = os.path.join(data_dir, fastq2)
            # Make sure file exists
            fastq2 = _check_path(fastq2)
            return(fastq1, fastq2)
        else:
            return(fastq1)
    else:
        # Grab path of the fastq file
        fastq1 = os.path.join(RESULTS2, wildcards.trim_method + "_trim",
            wildcards.sample + "_R1_trimmed.fastq.gz")
        if IS_PAIRED:
            # Grab path of second read
            fastq2 = os.path.join(RESULTS2, wildcards.trim_method + "_trim",
                wildcards.sample + "_R2_trimmed.fastq.gz")
            return(fastq1, fastq2)
        else:
            return(fastq1)

rule align:
    input:
        "{results}/{trim_method}_trim/{sample}.txt",
        "{results}/fastqc_{trim_method}/fastqc_{sample}_summary_trimmed.txt"
    output:
        output = "{results}/star_{trim_method}_trim/{sample}_finished.txt",
        strand = "{results}/infer_experiment_{trim_method}_trim/{sample}_experiment.txt"
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/star/star_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/star/star_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    params:
        genome        = GENOME,
        gtf           = GTF,
        output_prefix = os.path.join(RESULTS2, "star_{trim_method}_trim/{sample}_"),
        out_dir       = os.path.join(RESULTS2, "star_{trim_method}_trim"),
        fastqs        = _get_input,
        temp_file     = os.path.join(RESULTS2, "star_{trim_method}_trim/{sample}_Aligned.out.bam"),
        temp_location = os.path.join(RESULTS2, "star_{trim_method}_trim/{sample}"),
        bam_output    = os.path.join(RESULTS2, "star_{trim_method}_trim/{sample}_Aligned.sortedByCoord.out.bam"),
        bed = BED
    # message:
    #     "Aligning reads for {wildcards.sample}"
    singularity:
       GENERAL_CONTAINER
    shell:  
        """
        mkdir -p {params.out_dir}
        STAR \
            --runThreadN 10 \
            --genomeDir {params.genome} \
            --sjdbGTFfile {params.gtf} \
            --readFilesIn {params.fastqs} \
            --readFilesCommand zcat \
            --outSAMtype BAM Unsorted \
            --outFileNamePrefix {params.output_prefix}

        # Find strandedness - moved her because it works better pre-sorting
        infer_experiment.py -r {params.bed} -i {params.temp_file} > {output.strand}

        #samtools sort {params.temp_file} -T {params.temp_location} > {params.bam_output}
        samtools sort -@ 10 {params.temp_file} > {params.bam_output}
        rm {params.temp_file}
        touch {output.output}
        """


# Create STAR alignment summary
rule star_summary:
    input:
        expand(
            "{results}/star_{trim_method}_trim/{sample}_finished.txt",
            results = RESULTS, sample = SAMPLES,
            trim_method = TRIM_METHOD
        )
    output:
        "{results}/star_summary_{trim_method}_trim.tsv"
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/star/star_summary_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/star/star_summary_{wildcards.trim_method}_trim.err"
        )
    params:
        input_files = expand(
            "{results}/star_{trim_method}_trim/{sample}_Log.final.out",
            results = RESULTS2, sample = SAMPLES,
            trim_method = TRIM_METHOD
        )
    message:
        "Creating STAR alignment summary"
    threads:
        1
    singularity:
       GENERAL_CONTAINER
    script:
        "../scripts/starStats.py"
